var InitColorBlockSlide = function (setting) {
    if (!setting.colorPickMax) {
        setting.colorPickMax = 5;
    }

    //颜色插件
    var ColorPicker = function () {
        var
            ids = {},
            inAction,
            charMin = 65,
            visible,
            tpl = '<div class="colorpicker"><div class="colorpicker_color"><div><div></div></div></div><div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color"></div><div class="colorpicker_hex"><input type="text" maxlength="6" size="6" /></div><div class="colorpicker_rgb_r colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_h colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_s colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_submit graHover">确定</div><div class="colorpicker_cancel">取消</div></div>',
            defaults = {
                eventName: 'click',
                onShow: function () {},
                onBeforeShow: function () {},
                onHide: function () {},
                onChange: function () {},
                onSubmit: function () {},
                color: 'ff0000',
                livePreview: true,
                flat: false
            },
            fillRGBFields = function (hsb, cal) {
                var rgb = HSBToRGB(hsb);
                $(cal).data('colorpicker').fields
                    .eq(1).val(rgb.r).end()
                    .eq(2).val(rgb.g).end()
                    .eq(3).val(rgb.b).end();
            },
            fillHSBFields = function (hsb, cal) {
                $(cal).data('colorpicker').fields
                    .eq(4).val(hsb.h).end()
                    .eq(5).val(hsb.s).end()
                    .eq(6).val(hsb.b).end();
            },
            fillHexFields = function (hsb, cal) {
                $(cal).data('colorpicker').fields
                    .eq(0).val(HSBToHex(hsb)).end();
            },
            setSelector = function (hsb, cal) {
                $(cal).data('colorpicker').selector.css('background', '#' + HSBToHex({
                    h: hsb.h,
                    s: 100,
                    b: 100
                }));
                $(cal).data('colorpicker').selectorIndic.css({
                    left: parseInt(150 * hsb.s / 100, 10),
                    top: parseInt(150 * (100 - hsb.b) / 100, 10)
                });
            },
            setHue = function (hsb, cal) {
                $(cal).data("colorpicker").hue.css('top', parseInt(150 - 150 * hsb.h / 360, 10));
            },
            setCurrentColor = function (hsb, cal) {
                $(cal).data("colorpicker").currentColor.css("backgroundColor", "#" + HSBToHex(hsb));
            },
            setNewColor = function (hsb, cal) {
                $(cal).data("colorpicker").newColor.css("backgroundColor", "#" + HSBToHex(hsb));
            },
            keyDown = function (ev) {

                var pressedKey = ev.charCode || ev.keyCode || -1;
                if ((pressedKey > charMin && pressedKey <= 90) || pressedKey == 32) {
                    return false;
                }
                var cal = $(this).parent().parent();
                if (cal.data('colorpicker').livePreview === true) {
                    change.apply(this);
                }
            },
            change = function (ev) {
                var cal = $(this).parent().parent(),
                    col;
                if (this.parentNode.className.indexOf('_hex') > 0) {
                    cal.data('colorpicker').color = col = HexToHSB(fixHex(this.value));
                } else if (this.parentNode.className.indexOf('_hsb') > 0) {
                    cal.data('colorpicker').color = col = fixHSB({
                        h: parseInt(cal.data('colorpicker').fields.eq(4).val(), 10),
                        s: parseInt(cal.data('colorpicker').fields.eq(5).val(), 10),
                        b: parseInt(cal.data('colorpicker').fields.eq(6).val(), 10)
                    });
                } else {
                    cal.data('colorpicker').color = col = RGBToHSB(fixRGB({
                        r: parseInt(cal.data('colorpicker').fields.eq(1).val(), 10),
                        g: parseInt(cal.data('colorpicker').fields.eq(2).val(), 10),
                        b: parseInt(cal.data('colorpicker').fields.eq(3).val(), 10)
                    }));
                }
                if (ev) {
                    fillRGBFields(col, cal.get(0));
                    fillHexFields(col, cal.get(0));
                    fillHSBFields(col, cal.get(0));
                }
                setSelector(col, cal.get(0));
                setHue(col, cal.get(0));
                setNewColor(col, cal.get(0));
                cal.data('colorpicker').onChange.apply(cal, [col, HSBToHex(col), HSBToRGB(col)]);
            },
            blur = function (ev) {
                var cal = $(this).parent().parent();
                cal.data('colorpicker').fields.parent().removeClass('colorpicker_focus');
            },
            focus = function () {
                charMin = this.parentNode.className.indexOf('_hex') > 0 ? 70 : 65;
                $(this).parent().parent().data('colorpicker').fields.parent().removeClass('colorpicker_focus');
                $(this).parent().addClass('colorpicker_focus');
            },
            downIncrement = function (ev) {
                var field = $(this).parent().find('input').focus();
                var current = {
                    el: $(this).parent().addClass('colorpicker_slider'),
                    max: this.parentNode.className.indexOf('_hsb_h') > 0 ? 360 : (this.parentNode.className.indexOf('_hsb') > 0 ? 100 : 255),
                    y: ev.pageY,
                    field: field,
                    val: parseInt(field.val(), 10),
                    preview: $(this).parent().parent().data('colorpicker').livePreview
                };
                $(document).bind('mouseup', current, upIncrement);
                $(document).bind('mousemove', current, moveIncrement);
            },
            moveIncrement = function (ev) {
                ev.data.field.val(Math.max(0, Math.min(ev.data.max, parseInt(ev.data.val + ev.pageY - ev.data.y, 10))));
                if (ev.data.preview) {
                    change.apply(ev.data.field.get(0), [true]);
                }
                return false;
            },
            upIncrement = function (ev) {
                change.apply(ev.data.field.get(0), [true]);
                ev.data.el.removeClass('colorpicker_slider').find('input').focus();
                $(document).unbind('mouseup', upIncrement);
                $(document).unbind('mousemove', moveIncrement);
                return false;
            },
            downHue = function (ev) {
                var current = {
                    cal: $(this).parent(),
                    y: $(this).offset().top
                };
                current.preview = current.cal.data('colorpicker').livePreview;
                $(document).bind('mouseup', current, upHue);
                $(document).bind('mousemove', current, moveHue);
            },
            moveHue = function (ev) {
                change.apply(
                    ev.data.cal.data('colorpicker')
                        .fields
                        .eq(4)
                        .val(parseInt(360 * (150 - Math.max(0, Math.min(150, (ev.pageY - ev.data.y)))) / 150, 10))
                        .get(0),
                    [ev.data.preview]
                );
                return false;
            },
            upHue = function (ev) {
                fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                $(document).unbind('mouseup', upHue);
                $(document).unbind('mousemove', moveHue);
                return false;
            },
            downSelector = function (ev) {
                var current = {
                    cal: $(this).parent(),
                    pos: $(this).offset()
                };
                current.preview = current.cal.data('colorpicker').livePreview;
                $(document).bind('mouseup', current, upSelector);
                $(document).bind('mousemove', current, moveSelector);
                $(document).find('.colorpicker_color').unbind('click', moveSelector);
                $(document).find('.colorpicker_color').bind('click', current, moveSelector);
            },
            moveSelector = function (ev) {
                change.apply(
                    ev.data.cal.data('colorpicker')
                        .fields
                        .eq(6)
                        .val(parseInt(100 * (150 - Math.max(0, Math.min(150, (ev.pageY - ev.data.pos.top)))) / 150, 10))
                        .end()
                        .eq(5)
                        .val(parseInt(100 * (Math.max(0, Math.min(150, (ev.pageX - ev.data.pos.left)))) / 150, 10))
                        .get(0),
                    [ev.data.preview]
                );
                return false;
            },
            upSelector = function (ev) {
                fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                $(document).unbind('mouseup', upSelector);
                $(document).unbind('mousemove', moveSelector);
                return false;
            },
            enterSubmit = function (ev) {
                $(this).addClass('colorpicker_focus');
            },
            leaveSubmit = function (ev) {
                $(this).removeClass('colorpicker_focus');
            },
            clickSubmit = function (ev) {
                var cal = $(this).parent();
                var col = cal.data('colorpicker').color;
                cal.data('colorpicker').origColor = col;
                setCurrentColor(col, cal.get(0));
                // @point
                console.log('HSB前color',cal.data('colorpicker').color);
                cal.data('colorpicker').onSubmit(col, HSBToHex(col), HSBToRGB(col), cal.data('colorpicker').el);
                var initColor = ('#'+HSBToRGB(col)).toLocaleUpperCase;
                console.log('点击颜色', HSBToRGB(col), cal.data(),initColor);
            },
            cancelSubmit = function (ev) {
                $(this).closest('.colorpicker').hide();
            },
            show = function (ev) {
                var cal = $('#' + $(this).data('colorpickerId'));
                cal.data('colorpicker').onBeforeShow.apply(this, [cal.get(0)]);
                var pos = $(this).offset();
                var viewPort = getViewport();
                var top = pos.top + this.offsetHeight;
                var left = pos.left;
                if (top + 176 > viewPort.t + viewPort.h) {
                    top -= this.offsetHeight + 176;
                }
                if (left + 356 > viewPort.l + viewPort.w) {
                    left -= 356;
                }
                cal.css({
                    left: left + 'px',
                    top: top + 'px'
                });
                if (cal.data('colorpicker').onShow.apply(this, [cal.get(0)]) != false) {
                    cal.show();
                }
                $(document).bind('mousedown', {
                    cal: cal
                }, hide);
                return false;
            },
            hide = function (ev) {
                if (!isChildOf(ev.data.cal.get(0), ev.target, ev.data.cal.get(0))) {
                    if (ev.data.cal.data('colorpicker').onHide.apply(this, [ev.data.cal.get(0)]) != false) {
                        ev.data.cal.hide();
                    }
                    $(document).unbind('mousedown', hide);
                }
            },
            isChildOf = function (parentEl, el, container) {
                if (parentEl == el) {
                    return true;
                }
                if (parentEl.contains) {
                    return parentEl.contains(el);
                }
                if (parentEl.compareDocumentPosition) {
                    return !!(parentEl.compareDocumentPosition(el) & 16);
                }
                var prEl = el.parentNode;
                while (prEl && prEl != container) {
                    if (prEl == parentEl)
                        return true;
                    prEl = prEl.parentNode;
                }
                return false;
            },
            getViewport = function () {
                var m = document.compatMode == 'CSS1Compat';
                return {
                    l: window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
                    t: window.pageYOffset || (m ? document.documentElement.scrollTop : document.body.scrollTop),
                    w: window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth),
                    h: window.innerHeight || (m ? document.documentElement.clientHeight : document.body.clientHeight)
                };
            },
            fixHSB = function (hsb) {
                return {
                    h: Math.min(360, Math.max(0, hsb.h)),
                    s: Math.min(100, Math.max(0, hsb.s)),
                    b: Math.min(100, Math.max(0, hsb.b))
                };
            },
            fixRGB = function (rgb) {
                return {
                    r: Math.min(255, Math.max(0, rgb.r)),
                    g: Math.min(255, Math.max(0, rgb.g)),
                    b: Math.min(255, Math.max(0, rgb.b))
                };
            },
            fixHex = function (hex) {
                var len = 6 - hex.length;
                if (len > 0) {
                    var o = [];
                    for (var i = 0; i < len; i++) {
                        o.push('0');
                    }
                    o.push(hex);
                    hex = o.join('');
                }
                return hex;
            },
            HexToRGB = function (hex) {
                var hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
                return {
                    r: hex >> 16,
                    g: (hex & 0x00FF00) >> 8,
                    b: (hex & 0x0000FF)
                };
            },
            HexToHSB = function (hex) {
                return RGBToHSB(HexToRGB(hex));
            },
            RGBToHSB = function (rgb) {
                var hsb = {
                    h: 0,
                    s: 0,
                    b: 0
                };
                var min = Math.min(rgb.r, rgb.g, rgb.b);
                var max = Math.max(rgb.r, rgb.g, rgb.b);
                var delta = max - min;
                hsb.b = max;
                if (max != 0) {

                }
                hsb.s = max != 0 ? 255 * delta / max : 0;
                if (hsb.s != 0) {
                    if (rgb.r == max) {
                        hsb.h = (rgb.g - rgb.b) / delta;
                    } else if (rgb.g == max) {
                        hsb.h = 2 + (rgb.b - rgb.r) / delta;
                    } else {
                        hsb.h = 4 + (rgb.r - rgb.g) / delta;
                    }
                } else {
                    hsb.h = -1;
                }
                hsb.h *= 60;
                if (hsb.h < 0) {
                    hsb.h += 360;
                }
                hsb.s *= 100 / 255;
                hsb.b *= 100 / 255;
                return hsb;
            },
            // @point
            HSBToRGB = function (hsb) {
                var h = hsb.h,
                    s = hsb.s / 100,
                    v = hsb.b / 100;
                var h1 = Math.floor(h / 60) % 6;
                var f = h / 60 - h1;
                var p = v * (1 - s);
                var q = v * (1 - f * s);
                var t = v * (1 - (1 - f) * s);
                var r, g, b;
                switch (h1) {
                    case 0:
                        r = v;
                        g = t;
                        b = p;
                        break;
                    case 1:
                        r = q;
                        g = v;
                        b = p;
                        break;
                    case 2:
                        r = p;
                        g = v;
                        b = t;
                        break;
                    case 3:
                        r = p;
                        g = q;
                        b = v;
                        break;
                    case 4:
                        r = t;
                        g = p;
                        b = v;
                        break;
                    case 5:
                        r = v;
                        g = p;
                        b = q;
                        break;
                }
                // console.log('rgb',[Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)])
                return {
                    r: Math.round(r * 255),
                    g: Math.round(g * 255),
                    b: Math.round(b * 255)
                };
            },
            RGBToHex = function (rgb) {
                var hex = [
                    rgb.r.toString(16),
                    rgb.g.toString(16),
                    rgb.b.toString(16)
                ];
                $.each(hex, function (nr, val) {
                    if (val.length == 1) {
                        hex[nr] = '0' + val;
                    }
                });
                return hex.join('');
            },
            HSBToHex = function (hsb) {
                return RGBToHex(HSBToRGB(hsb));
            },
            restoreOriginal = function () {
                var cal = $(this).parent();
                var col = cal.data('colorpicker').origColor;
                cal.data('colorpicker').color = col;
                fillRGBFields(col, cal.get(0));
                fillHexFields(col, cal.get(0));
                fillHSBFields(col, cal.get(0));
                setSelector(col, cal.get(0));
                setHue(col, cal.get(0));
                setNewColor(col, cal.get(0));
            };
        return {
            init: function (opt) {
                opt = $.extend({}, defaults, opt || {});
                if (typeof opt.color == 'string') {
                    opt.color = HexToHSB(opt.color);
                } else if (opt.color.r != undefined && opt.color.g != undefined && opt.color.b != undefined) {
                    opt.color = RGBToHSB(opt.color);
                } else if (opt.color.h != undefined && opt.color.s != undefined && opt.color.b != undefined) {
                    opt.color = fixHSB(opt.color);
                } else {
                    return this;
                }
                return this.each(function () {
                    if (!$(this).data('colorpickerId')) {
                        var options = $.extend({}, opt);
                        options.origColor = opt.color;
                        var id = 'collorpicker_' + parseInt(Math.random() * 1000);
                        $(this).data('colorpickerId', id);
                        var cal = $(tpl).attr('id', id);
                        if (options.flat) {
                            cal.appendTo(this).show();
                        } else {
                            cal.appendTo(document.body);
                        }
                        options.fields = cal.find('input')
                            .bind('keyup', keyDown)
                            .bind('change', change)
                            .bind('blur', blur)
                            .bind('focus', focus);
                        cal.find('span').bind('mousedown', downIncrement).end()
                            .find('>div.colorpicker_current_color').bind('click', restoreOriginal);
                        options.selector = cal.find('div.colorpicker_color').bind('mousedown', downSelector);
                        options.selectorIndic = options.selector.find('div div');
                        options.el = this;
                        options.hue = cal.find('div.colorpicker_hue div');
                        cal.find('div.colorpicker_hue').bind('mousedown', downHue);
                        options.newColor = cal.find('div.colorpicker_new_color');
                        options.currentColor = cal.find('div.colorpicker_current_color');
                        cal.data('colorpicker', options);
                        cal.find('div.colorpicker_submit')
                            .bind('mouseenter', enterSubmit)
                            .bind('mouseleave', leaveSubmit)
                            .bind('click', clickSubmit);
                        cal.find('div.colorpicker_cancel')
                            .bind('click', cancelSubmit);
                        fillRGBFields(options.color, cal.get(0));
                        fillHSBFields(options.color, cal.get(0));
                        fillHexFields(options.color, cal.get(0));
                        setHue(options.color, cal.get(0));
                        setSelector(options.color, cal.get(0));
                        setCurrentColor(options.color, cal.get(0));
                        setNewColor(options.color, cal.get(0));
                        if (options.flat) {
                            cal.css({
                                position: 'relative',
                                display: 'block'
                            });
                        } else {
                            $(this).bind(options.eventName, show);
                        }
                    }
                });
            },
            showPicker: function () {
                return this.each(function () {
                    if ($(this).data('colorpickerId')) {
                        show.apply(this);
                    }
                });
            },
            hidePicker: function () {
                return this.each(function () {
                    if ($(this).data('colorpickerId')) {
                        $('#' + $(this).data('colorpickerId')).hide();
                    }
                });
            },
            setColor: function (col) {
                if (typeof col == 'string') {
                    col = HexToHSB(col);
                } else if (col.r != undefined && col.g != undefined && col.b != undefined) {
                    col = RGBToHSB(col);
                } else if (col.h != undefined && col.s != undefined && col.b != undefined) {
                    col = fixHSB(col);
                } else {
                    return this;
                }
                return this.each(function () {
                    if ($(this).data('colorpickerId')) {
                        var cal = $('#' + $(this).data('colorpickerId'));
                        cal.data('colorpicker').color = col;
                        cal.data('colorpicker').origColor = col;
                        fillRGBFields(col, cal.get(0));
                        fillHSBFields(col, cal.get(0));
                        fillHexFields(col, cal.get(0));
                        setHue(col, cal.get(0));
                        setSelector(col, cal.get(0));
                        setCurrentColor(col, cal.get(0));
                        setNewColor(col, cal.get(0));
                    }
                });
            }
        };
    }();
    $.fn.extend({
        ColorPicker: ColorPicker.init,
        ColorPickerHide: ColorPicker.hidePicker,
        ColorPickerShow: ColorPicker.showPicker,
        ColorPickerSetColor: ColorPicker.setColor
    });

    /*
     * 说明：
     *  1.全局颜色色值比较均采用大写的16进制进行比较
     */

    var selectedBlocks = [], //全局已选颜色对象
        isSearchPage = setting.type, //当前是搜索页不是颜色筛选综合页
        usuColorBox = $('#usucolor'),
        colorBlockBoxWrap = $('#match_colors'),
        colorBlockBox = $('#match_colors ol'),
        $curColorBlocks = []; //全局所有颜色块jq对象数组
        totalWidth = colorBlockBoxWrap.width();
        curr_length = colorBlockBox.find('li').length,
        usuColors = $('#usucolor>ol>li'),
        usuColorsArr = ['#EAECF3', '#E83930', '#2F80E8', '#892FE8', '#2FE749', '#FFA4A4', '#3F30E8', '#30C9E8',
            '#2EE8BD', '#A5E82E', '#E8E22F', '#E7B72F', '#E78C30', '#C67D54', '#11999E', '#143192', '#000000'],
        draging = false, //是否正在拖动颜色bar
        positionStart = null, //颜色bar拖动开始的位置
        positionCur = null, //颜色bar当前位置
        prevColorBlock = null, //上一个颜色块
        curColorBlock = null, //当前颜色块
        prevColorBlockIndex = 0, //上一个颜色块的索引值
        curColorBlockIndex = 0, //当前颜色块的索引值
        prevColorBlockWidth = 0, //上一个颜色块的宽
        curColorBlockWidth = 0,//当前颜色块的宽
        initing = true; //页面初始化中  resetBlocks时不需要触发onchange给后台

    //点击颜色bar拖动
    colorBlockBox.on('mousedown','span.separator',function (ev) {
        console.log('执行mousedown');
        cancelBubble(ev);
        draging = true;
        positionStart = ev.clientX;

        curColorBlock = $(this).parents('li');
        prevColorBlock = curColorBlock.prev('li');
        console.log(curColorBlock.get(0),prevColorBlock.get(0));
        curColorBlockIndex = curColorBlock.index();
        prevColorBlockIndex = curColorBlockIndex-1;
        prevColorBlockWidth = prevColorBlock.width();
        curColorBlockWidth = curColorBlock.width();
        totalWidth = colorBlockBoxWrap.width();
    })
    $(document).on('mousemove', function (ev) {
        // cancelBubble(ev);
        if (draging) {
            var disMove = ev.clientX - positionStart;
            //保留两位小数
            prevBlockWidth = Math.round((prevColorBlockWidth + disMove) / totalWidth * 100 * 100) / 100;
            curBlockWidth = Math.round((curColorBlockWidth - disMove) / totalWidth * 100 * 100) / 100;
            var addWidth = prevBlockWidth + curBlockWidth; //  计算出两个元素的宽度总和  为了后边限制最小宽度
            if (prevBlockWidth <= 10) { //  限制宽度最小值为10%
                prevBlockWidth = 10;
                curBlockWidth = addWidth - prevBlockWidth;
            }
            if (curBlockWidth <= 10) { //  限制宽度最小值为10%
                curBlockWidth = 10;
                prevBlockWidth = addWidth - curBlockWidth;
            }
            //本来这里不需要存入数组的，但是为了判断是否超过100%还是需要存
            selectedBlocks[prevColorBlockIndex].per = prevBlockWidth;
            selectedBlocks[curColorBlockIndex].per = curBlockWidth;
            //判断百分比总和是否超过100
            var count = 0;
            for (var i = 0; i < selectedBlocks.length; i++) {
                count += selectedBlocks[i].per;
            }
            if (count != 100) {
                var otherTotal = 0;
                for (var i = 0; i < selectedBlocks.length; i++) {
                    if (i != prevColorBlockIndex) {
                        otherTotal += selectedBlocks[i].per;
                    }
                }
                prevBlockWidth = Math.floor((100 - otherTotal)*100)/100;
                selectedBlocks[prevColorBlockIndex].per = prevBlockWidth;
            }
            //赋值dom
            prevColorBlock.width(prevBlockWidth + '%');
            curColorBlock.width(curBlockWidth + '%');
            prevColorBlockWidth = prevBlockWidth / 100 * totalWidth;
            curColorBlockWidth = curBlockWidth / 100 * totalWidth;
            prevBlockWidth = Math.round(prevBlockWidth);
            curBlockWidth = Math.round(curBlockWidth);
            prevColorBlock.find('.colorPer-text').text(parseInt(prevBlockWidth) + '%');
            curColorBlock.find('.colorPer-text').text(parseInt(curBlockWidth) + '%');
        }
        positionStart = ev.clientX;
        // return false;
    });
    //// 颜色bar拖动结束 必须绑定在document上，不然在颜色块之外松开鼠标不会触发
    $(document).on('mouseup',function () {
        if(!draging) return;
        setting.onChange(selectedBlocks);
        draging = false;
        return false;
    });
    // 复制颜色默认添加data-clipboard-text
    // colorBlockBox.find('.colortext').data('data-clipboard-text', null);
    initColorBlock(setting.initColorSet);

    // 默认颜色列表点事件
    usuColors.on('click', function (event) {
        var that = $(this);
        event.stopPropagation();

        //默认获取到的行内颜色会被转成RGB需要重新再转成16进制
        var color = colorRGB2Hex(that.css('background-color'));
        //如果当前是搜索页，只需要返回点击颜色就行了
        if(isSearchPage) {
            console.log('来自搜索页的点击');
            setting.onChange([{
                color: color,
                per: 1,
                uinid:  Date.parse(new Date())*Math.random()
            }]);
        }else {
            if (that.hasClass('active')) {
                // console.log('所有颜色列表',selectedBlocks);
                selectedBlocks.forEach(function (el,i) {
                    if(color == el.color.toLocaleLowerCase()) {
                        $curColorBlocks[i].find('.remove-btn').trigger('click');
                        // $curColorBlocks.splice(i,1);
                    }
                });
                that.removeClass('active');
                if(selectedBlocks.length == 0){
                    $('.del-all-block').addClass('disable');
                }
            }else {
                $('.del-all-block').removeClass('disable');
                //未勾选
                addColorBlock(color);
            }
        }
        return false;
    });
    //删除全部已选颜色
    $('.del-all-block').on('click', function (ev) {
        if($(this).hasClass('disable')) return;
        //删除全局颜色数组中对应的数据  取消勾选
        usuColors.removeClass('active');
        $(this).addClass('disable');
        //隐藏颜色块wrap
        colorBlockBoxWrap.hide();
        //初始化
        selectedBlocks = [];
        $curColorBlocks = [];
        $('#match_colors ol li').remove();
        //重置所有色块
        resetColorBlock();
        setting.onChange(selectedBlocks);
        return false;
    });
    //// 点击默认颜色列表最后的colorpicker
    $('#colorSelector').ColorPicker({
        color: '#' + 'FF0000',
        onShow: function (colpkr) {
            $(colpkr).fadeIn(100);
            return false;
        },
        onHide: function (colpkr) {
            $(colpkr).fadeOut(100);
            return false;
        },
        onSubmit: function (hsb, hex, rgb, el) {
            var that = this;
            var color = ('#'+hex).toLocaleUpperCase();
            //如果当前是搜索页，只需要返回点击颜色就行了
            if(isSearchPage) {
                console.log('来自搜索页的点击');
                setting.onChange([{
                    color: color,
                    per: 1,
                    uinid:  Date.parse(new Date())*Math.random()
                }]);
                that.onHide($('.colorpicker').get(0));
            }else {
                addColorBlock(color);
                if (selectedBlocks.length <= setting.colorPickMax) {
                    if (setting.onSinglePick) {
                        setting.onSinglePick(hex)
                    }
                    //colorpicker消失
                    that.onHide($('.colorpicker').get(0));
                }
            }

        }
    });
    //// 点击每个颜色块中的colorpicker
    colorBlockBox.on('mousedown', '.custom-btn', function () {
        var $that = $(this),
            curColBlock = $that.parent();
        $(this).ColorPicker({
            color: '#' + 'FF0000',
            onShow: function (colpkr) {
                $(colpkr).fadeIn(100);
                return false;
            },
            onHide: function (colpkr) {
                $(colpkr).fadeOut(100);
                return false;
            },
            onSubmit: function (hsb, hex, rgb, el) {
                // 更新dom  更新数据
                console.log('点击cp输出颜色',hex);
                var color = ('#' + hex).toLocaleUpperCase(),
                    oldColor = $($(this).get(0).el.children[0]).parents('li').find('b').text().toLocaleUpperCase();
                // 原来的颜色是否在默认颜色列表中
                // console.log('前后颜色',oldColor,color);
                opeaUsuColors(oldColor);
                curColBlock.css('background', color);
                // @change
                var justColor = color.slice(1);
                curColBlock.find('b').text(color).attr('data-clipboard-text', justColor);
                // 修改后的颜色是否在默认颜色列表中
                opeaUsuColors(color);
                var uinid = $($(this).get(0).el).prev('.remove-btn').data('uinid');
                selectedBlocks.forEach(function (el, i) {
                    if (el.uinid == uinid) {
                        el.color = color;
                    }
                });
                //输出所有颜色对象
                setting.onChange(selectedBlocks);
                // @need 隐藏该colorpicker 暂时没有找到对应的colorpicker所以把所有colorpicker的都隐藏了
                $('.colorpicker').fadeOut(100);
            }
        });
    })
    $(document).on('mouseover', '.color-controls b', function () {
        $(this).html('点击复制');
    });
    $(document).on('click', '.color-controls b', function () {
        $(this).html('复制成功');
    });
    $('#seceening-btn').hover(function () {
        $(this).parent().find('.show-win').show();
    });
    $('.color-screening .show-win').mouseleave(function () {
        $(this).hide();
    });
    // @change
    // $(document).on('mouseleave', '.color-controls b', function () {
    // 	$(this).html('#'+$(this).attr('data-clipboard-text'));
    // });
    $(document).on('click', '.nav-list .list-r .wrap-m a', function () {
        $('#category').val($(this).attr('data-id'));
        $(this).addClass('active').siblings().removeClass('active');
    });
    //搜索页点击展开、收起
    var searchColorTip = $('.search-color-tip'),
        usuallycolorWrap = $('.usuallycolor-wrap'),
        iconUp = $('.search-color-tip .icon-shang1'),
        iconDrop = $('.search-color-tip .icon-xia');
    iconUp.on('click', function () {
        searchColorTip.addClass('drop');
        iconUp.hide();
        iconDrop.show();
        usuallycolorWrap.hide();
    });
    iconDrop.on('click', function () {
        searchColorTip.removeClass('drop');
        iconUp.show();
        iconDrop.hide();
        usuallycolorWrap.show();
    });


    //// 取消冒泡
    function cancelBubble(ev) {
        if (ev && ev.stopPropagation){
            ev.stopPropagation();
        } else {
            window.event.cancelBubble = true;
        }
    }

    // rgb => 16进制
    function colorRGB2Hex(color) {
        var rgb = color.split(',');
        var r = parseInt(rgb[0].split('(')[1]);
        var g = parseInt(rgb[1]);
        var b = parseInt(rgb[2].split(')')[0]);

        var hex = "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
        return hex;
    }

    function colorRGBARR2Hex(color) {
        var r = parseInt(color[0]);
        var g = parseInt(color[1]);
        var b = parseInt(color[2]);

        var hex = ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
        return hex;
    };

    //// 创建一个颜色块
    function createColorBlock(obj, is_init) {
        // 判断是否超出设定的颜色块个数
        if(selectedBlocks.length >= setting.colorPickMax) {
            alert('最多可选5个颜色块');
            return;
        };
        //当前没有选中颜色块  展示wrap
        if (!selectedBlocks.length) colorBlockBoxWrap.show();
        var color = obj.color.toLocaleUpperCase(),
            colorBlock = $(document.createElement('li')),
            colorControls = $(document.createElement('div')),
            colorText = $(document.createElement('b')),
            colorPerText = $(document.createElement('i')),
            removeBtn = $(document.createElement('i')),
            customBtn = $(document.createElement('i')),
            separator = $(document.createElement('span'));
        //定义类名、属性和内容以及uinid
        colorControls.addClass('color-controls');
        // @change
        var justColor = color.slice(1);
        colorText.text(color).attr('data-clipboard-text',justColor);
        colorPerText.addClass('colorPer-text').text(parseInt(obj.per) + '%');
        removeBtn.addClass('remove-btn').data('uinid', obj.uinid);
        removeBtn.html('<i class="iconfont">&#xe622;</i>');
        customBtn.addClass('custom-btn');
        customBtn.html('<i class="iconfont">&#xe692;</i>');
        separator.addClass('separator');
        //定义该颜色块的上一个颜色块，后面拖动要用
        separator.data('curColorBlockIndex',colorBlockBox.find('li').length);
        colorControls.append(colorText).append(colorPerText).append(removeBtn).append(customBtn).append(separator);
        colorBlock.css('background-color',color).css('width', obj.per + '%').append(colorControls);
        // 点击复制颜色
        colorText.mouseover(function () {
            colorText.text('点击复制');
        }).click(function () {
            colorText.text('复制成功');
        }).mouseleave(function () {
            colorText.text('#'+colorText.attr('data-clipboard-text'));
        });
        new ClipboardJS(colorText.get(0));
        //添加删除事件，删除本颜色块,删除dom，并更新颜色数组
        removeBtn.on('click', function (ev) {
            cancelBubble(ev);
            //要删除的颜色应该要从css行内获取  应为有时候会被colorpicker修改掉初始颜色
            var uinid = $(this).data('uinid'),
                removeColor = colorText.text().toLocaleUpperCase();
            colorBlock.remove();
            //删除全局颜色数组中对应的数据
            selectedBlocks.forEach(function (el, i) {
                if (el.uinid == uinid) {
                    selectedBlocks.splice(i, 1);
                    $curColorBlocks.splice(i, 1);
                    if (!selectedBlocks.length) {
                        //隐藏颜色块wrap
                        colorBlockBoxWrap.hide();
                    }
                    //重置所有色块
                    resetColorBlock();
                    // 判断删除的颜色是否在默认颜色列表中，是的话需要取消勾选
                    opeaUsuColors(removeColor);
                }
            });
            if(selectedBlocks.length == 0){
                $(".del-all-block").addClass('disable');
            }
            return false;
        });
        //将该颜色块对象放入全局颜色数组中，并push进dom里
        selectedBlocks.push(obj);
        colorBlockBox.append(colorBlock);
        $curColorBlocks.push(colorBlock);
        //非初始化时重置色块
        if(is_init !== true) {
            //重置所有色块
            resetColorBlock();
        }

        // 判断新增的颜色是否在默认颜色列表中，是的话需要勾选
        opeaUsuColors(color);
    }

    //// 初始化颜色块
    function initColorBlock(initColors) {
        if (!initColors.length) {
            initing = false;
            return;
        }
        // console.log('initColors', initColors);
        colorBlockBoxWrap.show();
        var len = initColors.length;
        initColors.forEach(function (el,i) {
            if(i == len-1){
                //初始化最后一个要多传一个参数 用来关闭initing状态
                createColorBlock(el, true);
            }else {
                createColorBlock(el, true);
            }

        });
        initing = false;
    }
    //// 增加一个颜色块
    function addColorBlock(color) {
        var per = parseInt(100/(selectedBlocks.length+1));
        createColorBlock({
            color: color,
            per: per,
            uinid:  Date.parse(new Date())*Math.random()
        }, false);
    }

    //// 对默认颜色列表增加active或者删除active
    function opeaUsuColors(color) {
        //带有.color-body.pageSearch类名的为搜索页不是颜色筛选综合页 不进行勾选操作
        if (!isSearchPage) {
            for (var i = 0, len = usuColorsArr.length; i < len; i++) {
                if (color == usuColorsArr[i]) {
                    // console.log('颜色相等');
                    usuColors.eq(i).toggleClass('active');
                }
            }
        }
    }
    //// 重置颜色百分比块
    function resetColorBlock() {
        var blocks = colorBlockBox.children(),
            per = parseInt(100 / selectedBlocks.length);
        var with_per = per;
        if (selectedBlocks.length == 3) {
            with_per = 33.33;
        }
        blocks.css('width', with_per + '%');
        blocks.each(function () {
            $(this).find('.colorPer-text').text(per + '%');
        });
        //修改数据
        for (var i = 0, len = selectedBlocks.length; i < len; i++) {
            selectedBlocks[i].per = with_per;
        }
        //输出所有颜色对象 页面初始化中时 resetBlocks时不需要触发onchange给后台
        if (!initing) {
            // console.log('reset',selectedBlocks);
            setting.onChange(selectedBlocks);
        }
    }
};




